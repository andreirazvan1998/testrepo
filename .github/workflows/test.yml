name: Run Pytest on PR

on:
  push:
    branches:
      - '**'  # Trigger pentru toate branch-urile

permissions:
  pull-requests: write

jobs:
  test_and_create_pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest  # Asigură-te că ai un fișier requirements.txt pentru dependențe

      - name: Check if PR exists
        id: pr_check
        run: |
          PR_URL=$(gh pr list --head ${{ github.ref_name }} --state open --json url -q '.[0].url')
          if [ -z "$PR_URL" ]; then
            echo "No PR found, will create a new one."
            echo "PR_EXISTS=false" >> $GITHUB_ENV
          else
            echo "PR found, skipping creation."
            echo "PR_EXISTS=true" >> $GITHUB_ENV
            echo "PR_URL=$PR_URL" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Set token pentru gh CLI

      - name: Create Pull Request as Draft
        id: create_pr
        if: env.PR_EXISTS == 'false'
        run: |
          PR_URL=$(gh pr create -B main -H ${{ github.ref_name }} --title 'Merge ${{ github.ref_name }} into main' --body 'Created by GitHub action' --draft)
          echo "PR created: $PR_URL"
          echo "PR_URL=$PR_URL" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Pytest
        id: pytest
        run: |
          pytest test_script.py > result.log; tail -n 10 result.log
          if grep -q "FAILED" result.log; then
            echo "TESTS_FAILED=true" >> $GITHUB_ENV
          fi

      - name: Close PR and Create New Draft PR if Tests Fail
        if: env.TESTS_FAILED == 'true' && env.PR_EXISTS == 'true'
        run: |
          # Închidem PR-ul existent și creăm unul nou
          echo "Tests failed, closing existing PR and creating a new draft PR."
          gh pr close "$PR_URL"
          PR_URL=$(gh pr create -B main -H ${{ github.ref_name }} --title 'Merge ${{ github.ref_name }} into main' --body 'Created by GitHub action' --draft)
          echo "New PR created: $PR_URL"
          echo "PR_URL=$PR_URL" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert PR to Open if Tests Pass
        if: success() && env.PR_EXISTS == 'false'
        run: |
          PR_URL=$(gh pr list --head ${{ github.ref_name }} --state open --json url -q '.[0].url')
          echo "Tests passed, marking PR as ready for review."
          gh pr ready "$PR_URL"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Update Existing PR (if PR exists)
        if: env.PR_EXISTS == 'true' && success()
        run: |
          echo "Tests passed, converting the PR to open"
          gh pr ready "$PR_URL"
          gh pr edit "$PR_URL" --add-reviewer RadiCarolAlin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
