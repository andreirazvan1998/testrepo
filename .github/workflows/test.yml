name: Run Pytest on PR

on:
  push:
    branches:
      - '**'  # Se rulează pe orice branch
  pull_request:
    types:
      - ready_for_review  # Se declanșează când PR-ul iese din draft

permissions:
  pull-requests: write

jobs:
  test_and_manage_pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest  # Asigură-te că ai un requirements.txt

      - name: Run Pytest
        id: pytest
        continue-on-error: true  # Evităm oprirea workflow-ului în caz de eșec
        run: pytest > pytest-results.txt

      - name: Check if tests failed
        id: check_tests
        run: |
          if grep -q "FAILED" pytest-results.txt; then
            echo "Tests failed! PR will stay or return to draft."
            echo "TESTS_FAILED=true" >> $GITHUB_ENV
          else
            echo "Tests passed! PR can be open."
            echo "TESTS_FAILED=false" >> $GITHUB_ENV
        shell: bash

      - name: Get PR URL
        id: get_pr
        run: |
          PR_URL=$(gh pr list --head ${{ github.ref_name }} --state open --json url -q '.[0].url')
          if [ -z "$PR_URL" ]; then
            echo "No PR found."
            exit 1
          fi
          echo "PR_URL=$PR_URL" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Move PR to Draft if Tests Fail
        if: env.TESTS_FAILED == 'true'
        run: |
          echo "Tests failed, moving PR back to draft."
          gh pr ready --undo "$PR_URL"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert PR to Open if Tests Pass
        if: env.TESTS_FAILED == 'false'
        run: |
          echo "Tests passed, PR remains open."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
